{"version":3,"file":"static/js/219.e0a0c526.chunk.js","mappings":"mRAiHA,UAtGA,YACIA,EAAAA,EAAAA,IAAa,iBAAkB,CAAEC,UAAW,KAC5C,MAAgCC,EAAAA,WAAiBC,EAAAA,IAAzCC,EAAO,EAAPA,QAASC,EAAU,EAAVA,WACjB,EAA8BH,EAAAA,WAAiBI,EAAAA,IAAvCC,EAAM,EAANA,OAAQC,EAAS,EAATA,UAGhB,OAFgBN,EAAAA,OAAa,OAGzB,iBAAKO,UAAU,WAAU,WACrB,iCACIA,UAAU,oCACLF,EAAOG,KAAKC,MAAQ,CAAE,qBAAqB,GAAD,OAAKJ,EAAOG,KAAKE,UAAc,MAAI,eAElF,kBAAOC,QAAQ,OAAM,SAAC,eACtB,kBACIC,KAAK,OACLL,UAAU,OACVM,GAAG,OACHL,KAAK,OACLM,YAAY,iBACZC,QAAS,SAACC,GAAC,OAAKC,EAAAA,EAAAA,IAAcD,EAAGV,EAAU,EAC3CY,SAAU,SAACF,GACPb,GAAW,SAACgB,GACR,IAAMC,EAAKJ,EAAEK,OACb,OAAO,kBAAKF,GAAC,cAAGC,EAAGZ,KAAOY,EAAGE,OACjC,GACJ,EACAA,MAAOpB,EAAQM,YAGvB,iCACID,UAAU,qCACLF,EAAOkB,MAAMd,MAAQ,CAAE,qBAAqB,GAAD,OAAKJ,EAAOkB,MAAMb,UAAc,MAAI,eAEpF,kBAAOC,QAAQ,QAAO,SAAC,WACvB,kBACIC,KAAK,QACLL,UAAU,QACVM,GAAG,QACHL,KAAK,QACLM,YAAY,kBACZC,QAAS,SAACC,GAAC,OAAKC,EAAAA,EAAAA,IAAcD,EAAGV,EAAU,EAC3CkB,OAAQ,SAACR,GAAC,OAAKS,EAAAA,EAAAA,IAAcT,EAAGV,EAAU,EAC1CY,SAAU,SAACF,GACPb,GAAW,SAACgB,GACR,IAAMC,EAAKJ,EAAEK,OACb,OAAO,kBAAKF,GAAC,cAAGC,EAAGZ,KAAOY,EAAGE,OACjC,GACJ,EACAA,MAAOpB,EAAQqB,aAGvB,iCACIhB,UAAU,qCACLF,EAAOqB,MAAMjB,MAAQ,CAAE,qBAAqB,GAAD,OAAKJ,EAAOqB,MAAMhB,UAAc,MAAI,eAEpF,kBAAOC,QAAQ,QAAO,SAAC,kBACvB,kBACIC,KAAK,MACLL,UAAU,QACVM,GAAG,QACHL,KAAK,QACLM,YAAY,oBACZC,QAAS,SAACC,GAAC,OAAKC,EAAAA,EAAAA,IAAcD,EAAGV,EAAU,EAC3CkB,OAAQ,SAACR,GAAC,OAAKW,EAAAA,EAAAA,IAAYX,EAAGV,EAAU,EACxCY,SAAU,SAACF,GACPb,GAAW,SAACgB,GACR,IAAMC,EAAKJ,EAAEK,OACb,OAAO,kBAAKF,GAAC,cAAGC,EAAGZ,KAAOY,EAAGE,OACjC,GACJ,EACAA,MAAOpB,EAAQwB,aAGvB,iCACInB,UAAU,mCACLF,EAAOuB,IAAInB,MAAQ,CAAE,qBAAqB,GAAD,OAAKJ,EAAOuB,IAAIlB,UAAc,MAAI,eAEhF,kBAAOC,QAAQ,MAAK,SAAC,mBACrB,SAAC,IAAU,CACPkB,gBAAgB,qBAChBtB,UAAU,MACVC,KAAK,MACLK,GAAG,MACHiB,QAASA,EAAAA,GACTC,QAASA,EAAAA,GACTb,SAAU,SAACc,GACP7B,GAAW,SAAC8B,GACR,OAAO,kBAAKA,GAAI,IAAEL,IAAKI,GAC3B,GACJ,EACAE,SAAUhC,EAAQ0B,IAClBO,WAAW,sBAGnB,gBAAK5B,UAAU,mCAAkC,UAC7C,SAAC,KAAI,CAAC6B,GAAIC,EAAAA,EAAAA,iBAAAA,QAAiCC,SAAS,EAAM/B,UAAU,OAAM,SAAC,aAM3F,C","sources":["pages/friend_onboarding/components/page_one/PageOne.tsx"],"sourcesContent":["import * as React from \"react\";\r\nimport { routes } from \"router\";\r\nimport { validateEmail, validateInput, validateTel } from \"utilities/handleFormSubmit\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAnimateIn } from \"utilities/customHooks\";\r\nimport { friendDetailsContext, friendErrorDetailsContext } from \"utilities/contextDefinitions\";\r\nimport { maxDate, minDate } from \"utilities/globalVariables\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"pages/roommate_onboarding/components/page_one/page-one.scss\";\r\n\r\nfunction PageOne() {\r\n    useAnimateIn(\".slide-in-rest\", { threshold: 0.7 });\r\n    const { details, setDetails } = React.useContext(friendDetailsContext);\r\n    const { errors, setErrors } = React.useContext(friendErrorDetailsContext);\r\n    const dateRef = React.useRef(null);\r\n\r\n    return (\r\n        <div className=\"page-one\">\r\n            <div\r\n                className=\"input-wrapper name slide-in-rest\"\r\n                {...(errors.name.error ? { \"data-error-message\": `${errors.name.message}` } : null)}\r\n            >\r\n                <label htmlFor=\"name\">full name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"name\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Your full name\"\r\n                    onKeyUp={(e) => validateInput(e, setErrors)}\r\n                    onChange={(e) => {\r\n                        setDetails((p) => {\r\n                            const el = e.target as HTMLInputElement;\r\n                            return { ...p, [el.name]: el.value };\r\n                        });\r\n                    }}\r\n                    value={details.name}\r\n                />\r\n            </div>\r\n            <div\r\n                className=\"input-wrapper email slide-in-rest\"\r\n                {...(errors.email.error ? { \"data-error-message\": `${errors.email.message}` } : null)}\r\n            >\r\n                <label htmlFor=\"email\">email</label>\r\n                <input\r\n                    type=\"email\"\r\n                    className=\"email\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Your full email\"\r\n                    onKeyUp={(e) => validateInput(e, setErrors)}\r\n                    onBlur={(e) => validateEmail(e, setErrors)}\r\n                    onChange={(e) => {\r\n                        setDetails((p) => {\r\n                            const el = e.target as HTMLInputElement;\r\n                            return { ...p, [el.name]: el.value };\r\n                        });\r\n                    }}\r\n                    value={details.email}\r\n                />\r\n            </div>\r\n            <div\r\n                className=\"input-wrapper phone slide-in-rest\"\r\n                {...(errors.phone.error ? { \"data-error-message\": `${errors.phone.message}` } : null)}\r\n            >\r\n                <label htmlFor=\"phone\">Phone number</label>\r\n                <input\r\n                    type=\"tel\"\r\n                    className=\"phone\"\r\n                    id=\"phone\"\r\n                    name=\"phone\"\r\n                    placeholder=\"Your phone number\"\r\n                    onKeyUp={(e) => validateInput(e, setErrors)}\r\n                    onBlur={(e) => validateTel(e, setErrors)}\r\n                    onChange={(e) => {\r\n                        setDetails((p) => {\r\n                            const el = e.target as HTMLInputElement;\r\n                            return { ...p, [el.name]: el.value };\r\n                        });\r\n                    }}\r\n                    value={details.phone}\r\n                />\r\n            </div>\r\n            <div\r\n                className=\"input-wrapper dob slide-in-rest\"\r\n                {...(errors.dob.error ? { \"data-error-message\": `${errors.dob.message}` } : null)}\r\n            >\r\n                <label htmlFor=\"dob\">Date of birth</label>\r\n                <DatePicker\r\n                    placeholderText=\"Your date of birth\"\r\n                    className=\"dob\"\r\n                    name=\"dob\"\r\n                    id=\"dob\"\r\n                    maxDate={maxDate}\r\n                    minDate={minDate}\r\n                    onChange={(date) => {\r\n                        setDetails((prev) => {\r\n                            return { ...prev, dob: date };\r\n                        });\r\n                    }}\r\n                    selected={details.dob}\r\n                    dateFormat=\"d MMMM, yyyy\"\r\n                />\r\n            </div>\r\n            <div className=\"navigation-buttons slide-in-rest\">\r\n                <Link to={routes.friendOnboarding.pageTwo} replace={true} className=\"next\">\r\n                    next\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default PageOne;\r\n"],"names":["useAnimateIn","threshold","React","friendDetailsContext","details","setDetails","friendErrorDetailsContext","errors","setErrors","className","name","error","message","htmlFor","type","id","placeholder","onKeyUp","e","validateInput","onChange","p","el","target","value","email","onBlur","validateEmail","phone","validateTel","dob","placeholderText","maxDate","minDate","date","prev","selected","dateFormat","to","routes","replace"],"sourceRoot":""}